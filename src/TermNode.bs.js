// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Terms$ReactHooksTemplate = require("./Terms.bs.js");

var y = /* Abstraction */Block.__(1, [
    "f",
    /* Application */Block.__(2, [
        /* Abstraction */Block.__(1, [
            "x",
            /* Application */Block.__(2, [
                /* Token */Block.__(0, [/* Variable */Block.__(2, ["f"])]),
                /* Application */Block.__(2, [
                    /* Token */Block.__(0, [/* Variable */Block.__(2, ["x"])]),
                    /* Token */Block.__(0, [/* Variable */Block.__(2, ["x"])])
                  ])
              ])
          ]),
        /* Abstraction */Block.__(1, [
            "x",
            /* Application */Block.__(2, [
                /* Token */Block.__(0, [/* Variable */Block.__(2, ["f"])]),
                /* Application */Block.__(2, [
                    /* Token */Block.__(0, [/* Variable */Block.__(2, ["x"])]),
                    /* Token */Block.__(0, [/* Variable */Block.__(2, ["x"])])
                  ])
              ])
          ])
      ])
  ]);

var yInUse_001 = /* Abstraction */Block.__(1, [
    "z",
    /* Token */Block.__(0, [/* Variable */Block.__(2, ["z"])])
  ]);

var yInUse = /* Application */Block.__(2, [
    y,
    yInUse_001
  ]);

var etaInUse = /* Abstraction */Block.__(1, [
    "x",
    /* Application */Block.__(2, [
        /* Abstraction */Block.__(1, [
            "z",
            /* Token */Block.__(0, [/* Variable */Block.__(2, ["z"])])
          ]),
        /* Token */Block.__(0, [/* Variable */Block.__(2, ["x"])])
      ])
  ]);

function TermNode(Props) {
  var match = React.useReducer((function (state, action) {
          return /* record */[/* term */Terms$ReactHooksTemplate.$$eval(state[/* term */0])];
        }), /* record */[/* term */etaInUse]);
  var dispatch = match[1];
  React.useEffect((function () {
          var timerId = setInterval((function (param) {
                  return Curry._1(dispatch, /* Tick */0);
                }), 1000);
          return (function (param) {
                    clearInterval(timerId);
                    return /* () */0;
                  });
        }), ([]));
  return React.createElement("div", undefined, Terms$ReactHooksTemplate.termsToEl(match[0][/* term */0]));
}

var t = /* Application */Block.__(2, [
    /* Abstraction */Block.__(1, [
        "y",
        /* Application */Block.__(2, [
            /* Token */Block.__(0, [/* Variable */Block.__(2, ["x"])]),
            /* Token */Block.__(0, [/* Variable */Block.__(2, ["y"])])
          ])
      ]),
    /* Token */Block.__(0, [/* Variable */Block.__(2, ["z"])])
  ]);

var make = TermNode;

exports.t = t;
exports.y = y;
exports.yInUse = yInUse;
exports.etaInUse = etaInUse;
exports.make = make;
/* react Not a pure module */
