// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var React = require("react");

function termsToEl(t) {
  switch (t.tag | 0) {
    case 0 : 
        return React.createElement("span", {
                    style: {
                      color: "green"
                    }
                  }, t[0]);
    case 1 : 
        return React.createElement("span", undefined, "(\\" + (t[0] + " -> "), termsToEl(t[1]), ")");
    case 2 : 
        return React.createElement("span", undefined, "(", termsToEl(t[0]), " ", termsToEl(t[1]), ")");
    
  }
}

function substitution(_body, placeholder, substitute) {
  while(true) {
    var body = _body;
    switch (body.tag | 0) {
      case 0 : 
          var s = body[0];
          var match = s === placeholder;
          if (match) {
            return substitute;
          } else {
            return /* Token */Block.__(0, [s]);
          }
      case 1 : 
          var t = body[1];
          var s$1 = body[0];
          var match$1 = s$1 === placeholder;
          if (match$1) {
            _body = t;
            continue ;
          } else {
            return /* Abstraction */Block.__(1, [
                      s$1,
                      substitution(t, placeholder, substitute)
                    ]);
          }
      case 2 : 
          return /* Application */Block.__(2, [
                    substitution(body[0], placeholder, substitute),
                    substitution(body[1], placeholder, substitute)
                  ]);
      
    }
  };
}

function betaReduce(t) {
  switch (t.tag | 0) {
    case 0 : 
        return /* Token */Block.__(0, [t[0]]);
    case 1 : 
        return /* Abstraction */Block.__(1, [
                  t[0],
                  t[1]
                ]);
    case 2 : 
        var match = t[0];
        switch (match.tag | 0) {
          case 0 : 
              return /* Application */Block.__(2, [
                        /* Token */Block.__(0, [match[0]]),
                        t[1]
                      ]);
          case 1 : 
              return substitution(match[1], match[0], t[1]);
          case 2 : 
              return /* Application */Block.__(2, [
                        betaReduce(/* Application */Block.__(2, [
                                match[0],
                                match[1]
                              ])),
                        t[1]
                      ]);
          
        }
    
  }
}

exports.termsToEl = termsToEl;
exports.substitution = substitution;
exports.betaReduce = betaReduce;
/* react Not a pure module */
